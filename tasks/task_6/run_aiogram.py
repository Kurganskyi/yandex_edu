"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ aiogram –±–æ—Ç–∞ —Å –≤–≤–æ–¥–æ–º —Ç–æ–∫–µ–Ω–∞
"""

import asyncio
import logging
import re
from typing import Dict, Optional
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ {user_id: task}
active_timers: Dict[int, asyncio.Task] = {}


class TimerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–µ—Ä–æ–≤"""
    
    @staticmethod
    def parse_time(time_str: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã"""
        time_str = time_str.lower().strip()
        
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
        pattern = r'^(\d+)([smh]?)$'
        match = re.match(pattern, time_str)
        
        if not match:
            return None
        
        value = int(match.group(1))
        unit = match.group(2) or 's'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–∫—É–Ω–¥—ã
        
        if unit == 's':
            return value
        elif unit == 'm':
            return value * 60
        elif unit == 'h':
            return value * 3600
        else:
            return None
    
    @staticmethod
    def format_time(seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        hours, remainder = divmod(seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        if hours > 0:
            return f"{hours}—á {minutes}–º {seconds}—Å"
        elif minutes > 0:
            return f"{minutes}–º {seconds}—Å"
        else:
            return f"{seconds}—Å"


async def start_timer(user_id: int, duration: int, message: str = "") -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in active_timers:
            active_timers[user_id].cancel()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Ç–∞–π–º–µ—Ä–∞
        task = asyncio.create_task(timer_callback(user_id, duration, message))
        active_timers[user_id] = task
        
        logger.info(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {duration} —Å–µ–∫—É–Ω–¥")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {e}")
        return False


async def cancel_timer(user_id: int) -> bool:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if user_id in active_timers:
            active_timers[user_id].cancel()
            del active_timers[user_id]
            logger.info(f"–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç–∞–π–º–µ—Ä–∞: {e}")
        return False


async def timer_callback(user_id: int, duration: int, message: str = ""):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        await asyncio.sleep(duration)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
        bot = Bot.get_current()
        await bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! {message}".strip()
        )
        
        logger.info(f"–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except asyncio.CancelledError:
        logger.info(f"–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if user_id in active_timers:
            del active_timers[user_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /timer &lt;–≤—Ä–µ–º—è&gt; [—Å–æ–æ–±—â–µ–Ω–∏–µ] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "‚Ä¢ /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ /timer 10s\n"
        "‚Ä¢ /timer 5m –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "‚Ä¢ /timer 2h",
        parse_mode="HTML"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "‚Ä¢ /timer &lt;–≤—Ä–µ–º—è&gt; [—Å–æ–æ–±—â–µ–Ω–∏–µ] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "‚Ä¢ /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:\n"
        "‚Ä¢ 10s - 10 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ 5m - 5 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ 2h - 2 —á–∞—Å–∞\n"
        "‚Ä¢ 30 - 30 —Å–µ–∫—É–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
        parse_mode="HTML"
    )


@dp.message(Command("timer"))
async def cmd_timer(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timer"""
    user_id = message.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞!\n"
            "–ü—Ä–∏–º–µ—Ä: /timer 10s"
        )
        return
    
    time_str = args[0]
    timer_message = " ".join(args[1:]) if len(args) > 1 else ""
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    duration = TimerManager.parse_time(time_str)
    
    if duration is None or duration <= 0:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 10s, 5m, 2h –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ"
        )
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    success = await start_timer(user_id, duration, timer_message)
    
    if success:
        time_formatted = TimerManager.format_time(duration)
        response = f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {time_formatted}"
        if timer_message:
            response += f"\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: {timer_message}"
        await message.answer(response)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞")


@dp.message(Command("cancel"))
async def cmd_cancel(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    user_id = message.from_user.id
    
    success = await cancel_timer(user_id)
    
    if success:
        await message.answer("‚úÖ –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞")


@dp.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    )


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("ü§ñ –ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ").strip()
    
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=token)
    dp.bot = bot
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        for task in active_timers.values():
            task.cancel()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
