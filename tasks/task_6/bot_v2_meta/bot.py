#!/usr/bin/env python3
"""
Telegram-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã: /timer, /cancel, /status, /help
"""

import asyncio
import logging
import re
import signal
import sys
from typing import Dict, Optional, Tuple

from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=Config.LOG_LEVEL,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
# –ö–ª—é—á: (chat_id, user_id) –¥–ª—è –≥—Ä—É–ø–ø –∏–ª–∏ user_id –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
# –ó–Ω–∞—á–µ–Ω–∏–µ: asyncio.Task
active_timers: Dict[Tuple[int, int], asyncio.Task] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
bot: Optional[Bot] = None
dp: Optional[Dispatcher] = None


def get_timer_key(message: Message) -> Tuple[int, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞"""
    if message.chat.type == 'private':
        # –í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ user_id
        return (message.from_user.id, message.from_user.id)
    else:
        # –í –≥—Ä—É–ø–ø–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º (chat_id, user_id)
        return (message.chat.id, message.from_user.id)


def parse_time_duration(time_str: str) -> Optional[int]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - –ü—Ä–æ—Å—Ç—ã–µ: 10s, 30m, 1h
    - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: 1h30m, 2m30s, 1h15m20s
    - –° –ø—Ä–æ–±–µ–ª–∞–º–∏: 1 H 30 M, 90 s
    """
    if not time_str:
        return None
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –ª—é–±–æ–π —Ä–µ–≥–∏—Å—Ç—Ä
    pattern = r'^\s*(?:(\d+)\s*h\s*)?(?:(\d+)\s*m\s*)?(?:(\d+)\s*s\s*)?$'
    match = re.match(pattern, time_str.lower().strip())
    
    if not match:
        return None
    
    hours, minutes, seconds = match.groups()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
    total_seconds = 0
    if hours:
        total_seconds += int(hours) * 3600
    if minutes:
        total_seconds += int(minutes) * 60
    if seconds:
        total_seconds += int(seconds)
    
    return total_seconds if total_seconds > 0 else None


def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    return f"{hours:02d}:{minutes:02d}:{secs:02d}"


def format_time_description(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    
    parts = []
    if hours > 0:
        if hours == 1:
            parts.append("1 —á–∞—Å")
        elif hours < 5:
            parts.append(f"{hours} —á–∞—Å–∞")
        else:
            parts.append(f"{hours} —á–∞—Å–æ–≤")
    
    if minutes > 0:
        if minutes == 1:
            parts.append("1 –º–∏–Ω—É—Ç—É")
        elif minutes < 5:
            parts.append(f"{minutes} –º–∏–Ω—É—Ç—ã")
        else:
            parts.append(f"{minutes} –º–∏–Ω—É—Ç")
    
    if secs > 0:
        if secs == 1:
            parts.append("1 —Å–µ–∫—É–Ω–¥—É")
        elif secs < 5:
            parts.append(f"{secs} —Å–µ–∫—É–Ω–¥—ã")
        else:
            parts.append(f"{secs} —Å–µ–∫—É–Ω–¥")
    
    return " ".join(parts)


def create_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚è±Ô∏è 30 —Å–µ–∫", callback_data="timer_30s"),
            InlineKeyboardButton(text="‚è±Ô∏è 1 –º–∏–Ω", callback_data="timer_1m"),
        ],
        [
            InlineKeyboardButton(text="‚è±Ô∏è 5 –º–∏–Ω", callback_data="timer_5m"),
            InlineKeyboardButton(text="‚è±Ô∏è 10 –º–∏–Ω", callback_data="timer_10m"),
        ],
        [
            InlineKeyboardButton(text="‚è±Ô∏è 30 –º–∏–Ω", callback_data="timer_30m"),
            InlineKeyboardButton(text="‚è±Ô∏è 1 —á–∞—Å", callback_data="timer_1h"),
        ],
        [
            InlineKeyboardButton(text="üõë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_timer"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="status_timer"),
        ],
        [
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help_info"),
        ]
    ])
    return keyboard


async def timer_task(message: Message, duration: int):
    """
    –ó–∞–¥–∞—á–∞ —Ç–∞–π–º–µ—Ä–∞ - –∂–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    try:
        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        await asyncio.sleep(duration)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await message.answer("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
        
    except asyncio.CancelledError:
        # –¢–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω
        logger.info(f"–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Ç–∞–π–º–µ—Ä–∞: {e}")
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass


async def cancel_existing_timer(timer_key: Tuple[int, int]) -> bool:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    """
    if timer_key in active_timers:
        task = active_timers[timer_key]
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            pass
        del active_timers[timer_key]
        return True
    return False


async def start_timer_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timer"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        
        if not args:
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã: 10s, 5m, 1h –∏–ª–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ: 1h30m"
            )
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        time_str = " ".join(args)
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        duration = parse_time_duration(time_str)
        
        if duration is None:
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã: 10s, 5m, 1h –∏–ª–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ: 1h30m"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if duration < Config.MIN_DURATION or duration > Config.MAX_DURATION:
            await message.answer(
                f"–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {Config.MIN_DURATION} —Å–µ–∫—É–Ω–¥—ã –¥–æ {Config.MAX_DURATION} —Å–µ–∫—É–Ω–¥ (24 —á–∞—Å–∞)."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        timer_key = get_timer_key(message)
        
        # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        had_existing = await cancel_existing_timer(timer_key)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Ç–∞–π–º–µ—Ä–∞
        task = asyncio.create_task(timer_task(message, duration))
        active_timers[timer_key] = task
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        time_desc = format_time_description(duration)
        if had_existing:
            response = f"‚ÑπÔ∏è –°—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω. –ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ {time_desc}."
        else:
            response = f"üëâ –¢–∞–π–º–µ—Ä –Ω–∞ {time_desc} –∑–∞–ø—É—â–µ–Ω!"
        
        await message.answer(response)
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
        
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        if e.code == 429:  # Too Many Requests
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ start_timer_command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def cancel_timer_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    try:
        timer_key = get_timer_key(message)
        
        if await cancel_existing_timer(timer_key):
            await message.answer("üëâ –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
            logger.info(f"–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_timer_command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def status_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    try:
        timer_key = get_timer_key(message)
        
        if timer_key in active_timers:
            task = active_timers[timer_key]
            if not task.done():
                # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                await message.answer("‚è±Ô∏è –¢–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω. (–¢–æ—á–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è)")
            else:
                # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                del active_timers[timer_key]
                await message.answer("–¢–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        else:
            await message.answer("–¢–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ status_command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üïí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-—Ç–∞–π–º–µ—Ä!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞–π–º–µ—Ä–∞–º–∏ –≤ Telegram.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /timer –≤—Ä–µ–º—è - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä  
‚Ä¢ /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∞–π–º–µ—Ä–∞
‚Ä¢ /help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã! üöÄ
    """
    keyboard = create_main_keyboard()
    await message.answer(welcome_text, reply_markup=keyboard)


async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üïí –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/timer –≤—Ä–µ–º—è - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä  
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∞–π–º–µ—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/timer 30s - —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
/timer 5m - —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
/timer 1h - —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —á–∞—Å
/timer 1h30m - —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —á–∞—Å 30 –º–∏–Ω—É—Ç
/timer 2m30s - —Ç–∞–π–º–µ—Ä –Ω–∞ 2 –º–∏–Ω—É—Ç—ã 30 —Å–µ–∫—É–Ω–¥

–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:
‚Ä¢ s - —Å–µ–∫—É–Ω–¥—ã (10s)
‚Ä¢ m - –º–∏–Ω—É—Ç—ã (5m)  
‚Ä¢ h - —á–∞—Å—ã (2h)
‚Ä¢ –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏: 1h30m, 2m30s, 1h15m20s
‚Ä¢ –ü—Ä–æ–±–µ–ª—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è: 1 H 30 M

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 1 —Å–µ–∫—É–Ω–¥–∞
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)
‚Ä¢ –í –≥—Ä—É–ø–ø–∞—Ö: –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö: –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

‚ö†Ô∏è –í–∞–∂–Ω–æ: –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è!
    """
    await message.answer(help_text)


async def callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    try:
        data = callback.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤
        if data.startswith("timer_"):
            time_str = data.replace("timer_", "")
            duration = parse_time_duration(time_str)
            
            if duration is None:
                await callback.answer("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            if duration < Config.MIN_DURATION or duration > Config.MAX_DURATION:
                await callback.answer(f"–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {Config.MIN_DURATION} –¥–æ {Config.MAX_DURATION} —Å–µ–∫—É–Ω–¥", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
            timer_key = get_timer_key(callback.message)
            
            # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            had_existing = await cancel_existing_timer(timer_key)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Ç–∞–π–º–µ—Ä–∞
            task = asyncio.create_task(timer_task(callback.message, duration))
            active_timers[timer_key] = task
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            time_desc = format_time_description(duration)
            if had_existing:
                response = f"‚ÑπÔ∏è –°—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω. –ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ {time_desc}."
            else:
                response = f"üëâ –¢–∞–π–º–µ—Ä –Ω–∞ {time_desc} –∑–∞–ø—É—â–µ–Ω!"
            
            await callback.answer(response)
            await callback.message.edit_text(response, reply_markup=create_main_keyboard())
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        elif data == "cancel_timer":
            timer_key = get_timer_key(callback.message)
            
            if await cancel_existing_timer(timer_key):
                response = "üëâ –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω."
            else:
                response = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤."
            
            await callback.answer(response)
            await callback.message.edit_text(response, reply_markup=create_main_keyboard())
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        elif data == "status_timer":
            timer_key = get_timer_key(callback.message)
            
            if timer_key in active_timers:
                task = active_timers[timer_key]
                if not task.done():
                    response = "‚è±Ô∏è –¢–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω."
                else:
                    del active_timers[timer_key]
                    response = "–¢–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω."
            else:
                response = "–¢–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω."
            
            await callback.answer(response)
            await callback.message.edit_text(response, reply_markup=create_main_keyboard())
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏
        elif data == "help_info":
            help_text = """
üïí –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/timer –≤—Ä–µ–º—è - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä  
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∞–π–º–µ—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/timer 30s - —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
/timer 5m - —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
/timer 1h - —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —á–∞—Å
/timer 1h30m - —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —á–∞—Å 30 –º–∏–Ω—É—Ç
/timer 2m30s - —Ç–∞–π–º–µ—Ä –Ω–∞ 2 –º–∏–Ω—É—Ç—ã 30 —Å–µ–∫—É–Ω–¥

–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:
‚Ä¢ s - —Å–µ–∫—É–Ω–¥—ã (10s)
‚Ä¢ m - –º–∏–Ω—É—Ç—ã (5m)  
‚Ä¢ h - —á–∞—Å—ã (2h)
‚Ä¢ –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏: 1h30m, 2m30s, 1h15m20s
‚Ä¢ –ü—Ä–æ–±–µ–ª—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è: 1 H 30 M

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 1 —Å–µ–∫—É–Ω–¥–∞
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)
‚Ä¢ –í –≥—Ä—É–ø–ø–∞—Ö: –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö: –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

‚ö†Ô∏è –í–∞–∂–Ω–æ: –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è!
            """
            await callback.answer("–°–ø—Ä–∞–≤–∫–∞")
            await callback.message.edit_text(help_text, reply_markup=create_main_keyboard())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


async def on_startup():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info("All timers reset on restart")  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ —Ç–∞–π–º–µ—Ä–æ–≤
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(start_command, Command("start"))
    dp.message.register(start_timer_command, Command("timer"))
    dp.message.register(cancel_timer_command, Command("cancel"))
    dp.message.register(status_command, Command("status"))
    dp.message.register(help_command, Command("help"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏)
    dp.callback_query.register(callback_handler)
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def on_shutdown():
    """–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    if active_timers:
        logger.info(f"–û—Ç–º–µ–Ω—è–µ–º {len(active_timers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤...")
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for timer_key, task in active_timers.items():
            task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if active_timers:
            await asyncio.gather(*active_timers.values(), return_exceptions=True)
        
        active_timers.clear()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    if bot:
        await bot.session.close()
    
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º graceful shutdown...")
        asyncio.create_task(on_shutdown())
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global bot, dp
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(
            token=Config.TELEGRAM_BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        dp = Dispatcher()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        setup_signal_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await on_startup()
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        await on_shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
